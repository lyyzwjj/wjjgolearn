package _86split_string

// go test 测试组
import (
	"reflect"
	"testing"
)

/*func TestSplit(t *testing.T) {
	ret := Split("babcbef", "b")
	want := []string{"", "a", "c", "ef"}
	if !reflect.DeepEqual(ret, want) {
		// 测试用例失败
		t.Errorf("want:%v but got:%v", want, ret)

	}
	fmt.Printf("%#v\n", ret)
}

func Test2Split(t *testing.T) {
	ret := Split("a:b:c", ":")
	want := []string{"a", "b", "c"}
	if !reflect.DeepEqual(ret, want) {
		// 测试用例失败
		t.Errorf("want:%v but got:%v", want, ret)
	}
	fmt.Printf("%#v\n", ret)
}

func Test3Split(t *testing.T) {
	ret := Split("abcef", "bc")
	want := []string{"a", "ef"}
	if !reflect.DeepEqual(ret, want) {
		// 测试用例失败
		t.Fatalf("want:%v but got:%v", want, ret)
	}
	fmt.Printf("%#v\n", ret)
}
*/
func TestSplit(t *testing.T) {
	// 利用结构体包装测试参数
	type testCase struct {
		str  string
		sep  string
		want []string
	}
	//testGroup := []testCase{
	//	testCase{"babcbef", "b", []string{"", "a", "c", "ef"}},
	//	testCase{"a:b:c", ":", []string{"a", "b", "c"}},
	//	testCase{"abcef", "bc", []string{"a", "ef"}},
	//	testCase{"沙河有沙又有河", "有", []string{"沙河", "沙又", "河"}},
	//}
	testGroup := []testCase{
		{"babcbef", "b", []string{"", "a", "c", "ef"}},
		{"a:b:c", ":", []string{"a", "b", "c"}},
		{"abcef", "bc", []string{"a", "ef"}},
		{"沙河有沙又有河", "有", []string{"沙河", "沙又", "河"}},
	}
	for _, tc := range testGroup {
		got := Split(tc.str, tc.sep)
		if !reflect.DeepEqual(got , tc.want){
			t.Fatalf("want:%v but got:%v", tc.want, got)
		}
	}
}
